name: EC2 SSH deploy
description: Deploy a container to an EC2 host via SSH
inputs:
  host:
    description: EC2 host
    required: true
  username:
    description: SSH username
    required: true
  key:
    description: SSH private key
    required: true
  port:
    description: SSH port
    required: false
    default: '22'
  image:
    description: Full image reference to deploy
    required: true
  ghcr-username:
    description: GHCR username for remote docker login
    required: true
  ghcr-pat:
    description: GHCR Personal Access Token (read:packages) for remote docker login
    required: true
  app-name:
    description: Container name
    required: false
    default: delivergaz-api
  host-port:
    description: Host port to expose
    required: false
    default: '3000'
  container-port:
    description: Container port
    required: false
    default: '4000'
  env-file:
    description: Remote env file path
    required: false
    default: /opt/delivergaz/backend/.env
  network:
    description: Docker network name
    required: false
    default: delivergaz-network
runs:
  using: composite
  steps:
    - name: Deploy over SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ inputs.host }}
        username: ${{ inputs.username }}
        key: ${{ inputs.key }}
        port: ${{ inputs.port }}
        script_stop: true
        script: |
          set -euo pipefail

          IMAGE="${{ inputs.image }}"
          APP_NAME="${{ inputs['app-name'] }}"
          HOST_PORT="${{ inputs['host-port'] }}"
          CONTAINER_PORT="${{ inputs['container-port'] }}"
          ENV_FILE="${{ inputs['env-file'] }}"
          NETWORK="${{ inputs.network }}"

          echo "Creating app directories and network..."
          sudo mkdir -p /opt/delivergaz/backend /opt/delivergaz/uploads /opt/delivergaz/logs
          sudo chown -R "$USER":"$USER" /opt/delivergaz || true
          docker network create "$NETWORK" || true

          if [ ! -f "$ENV_FILE" ]; then
            echo "ERROR: $ENV_FILE not found on host. Create it with required env vars (MONGODB_URI, JWT_SECRET, etc.)"
            exit 1
          fi

          echo "Logging in to GHCR..."
          echo "${{ inputs['ghcr-pat'] }}" | docker login ghcr.io -u "${{ inputs['ghcr-username'] }}" --password-stdin

          echo "Pulling latest image: $IMAGE"
          docker pull "$IMAGE"

          echo "Stopping and removing existing container if any..."
          docker stop "$APP_NAME" || true
          docker rm "$APP_NAME" || true

          echo "Starting container..."
          docker run -d --name "$APP_NAME" --restart unless-stopped \
            --network "$NETWORK" \
            -p ${HOST_PORT}:${CONTAINER_PORT} \
            --env PORT=${CONTAINER_PORT} \
            --env-file "$ENV_FILE" \
            -v /opt/delivergaz/uploads:/app/uploads \
            -v /opt/delivergaz/logs:/app/logs \
            "$IMAGE"

          echo "Deployment completed. Container status:"
          docker ps --filter "name=${APP_NAME}"
