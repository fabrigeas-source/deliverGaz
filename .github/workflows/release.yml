name: Release

on:
  push:
    branches: [ stage ]
  workflow_dispatch:
    inputs:
      mode:
        description: "Which stage to run (full=bump then push-triggered build/deploy; or bump-only/build-only/deploy-only)"
        required: false
        default: "full"
        type: choice
        options:
          - full
          - bump-only
          - build-only
          - deploy-only
      release_type:
        description: "Semver bump type for bump-only/full"
        required: false
        default: "patch"
        type: choice
        options: [ patch, minor, major ]
      image_tag:
        description: "Image tag to deploy when mode=deploy-only (e.g., latest or a SHA)"
        required: false
        default: "latest"

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

env:
  ON_STAGE: ${{ github.ref == 'refs/heads/stage' }}
  IS_PUSH: ${{ github.event_name == 'push' }}
  IS_MANUAL: ${{ github.event_name == 'workflow_dispatch' }}
  MODE: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.mode) || '' }}
  IMAGE_TAG_INPUT: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.image_tag) || '' }}

jobs:
  bump-and-tag:
    name: Bump version, update changelog, tag (manual on stage)
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: ${{ fromJSON(env.ON_STAGE) && fromJSON(env.IS_MANUAL) && (env.MODE == 'full' || env.MODE == 'bump-only') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git user
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Fetch tags
        shell: bash
        run: git fetch --tags --force

      - name: Determine versions
        id: versions
        shell: bash
        run: |
          set -euo pipefail
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: '${last_tag}'"
          if [[ -n "$last_tag" ]]; then
            base_version=${last_tag#v}
          else
            base_version=$(jq -r .version backend/package.json)
          fi
          IFS='.' read -r major minor patch <<< "$base_version"
          major=${major:-1}; minor=${minor:-0}; patch=${patch:-0}
          case "${{ github.event.inputs.release_type }}" in
            minor) minor=$((minor+1)); patch=0 ;;
            major) major=$((major+1)); minor=0; patch=0 ;;
            *)     patch=$((patch+1)) ;;
          esac
          new_version="${major}.${minor}.${patch}"
          echo "new_version=$new_version" >> "$GITHUB_OUTPUT"
          echo "last_tag=$last_tag" >> "$GITHUB_OUTPUT"

      - name: Update backend version
        shell: bash
        run: |
          tmp_pkg=$(mktemp)
          jq ".version=\"${{ steps.versions.outputs.new_version }}\"" backend/package.json > "$tmp_pkg"
          mv "$tmp_pkg" backend/package.json

      - name: Update frontend version
        shell: bash
        run: |
          sed -i -E "s/^version: [0-9]+\.[0-9]+\.[0-9]+(\+[0-9]+)?/version: ${{ steps.versions.outputs.new_version }}\1/" frontend/pubspec.yaml

      - name: Update CHANGELOG.md
        shell: bash
        run: |
          set -euo pipefail
          if [[ -n "${{ steps.versions.outputs.last_tag }}" ]]; then
            range="${{ steps.versions.outputs.last_tag }}..HEAD"
          else
            range="--all"
          fi
          commits=$(git log --no-merges --pretty=format:"- %s (%h) â€” %an" $range || true)
          if [[ -z "$commits" ]]; then commits="- No changes"; fi
          today=$(date -u +%Y-%m-%d)
          {
            echo "# Changelog"
            echo
            echo "## v${{ steps.versions.outputs.new_version }} - $today"
            echo
            echo "$commits"
            echo
            if [[ -f CHANGELOG.md ]]; then
              awk 'NR==1 && $0 ~ /^# Changelog/ {next} {print}' CHANGELOG.md || true
            fi
          } > CHANGELOG.md.new
          mv CHANGELOG.md.new CHANGELOG.md

      - name: Commit version and changelog
        shell: bash
        run: |
          git add backend/package.json frontend/pubspec.yaml CHANGELOG.md
          if ! git diff-index --quiet HEAD --; then
            git commit -m "chore(release): v${{ steps.versions.outputs.new_version }} [skip ci]"
            git push origin HEAD:${{ github.ref_name }}
          else
            echo "No changes to commit"
          fi

      - name: Create and push tag
        shell: bash
        run: |
          if git tag -l "v${{ steps.versions.outputs.new_version }}" | grep -q .; then
            echo "Tag v${{ steps.versions.outputs.new_version }} already exists, skipping."
          else
            git tag -a "v${{ steps.versions.outputs.new_version }}" -m "Release v${{ steps.versions.outputs.new_version }}"
            git push origin "v${{ steps.versions.outputs.new_version }}"
          fi

  build-and-push-backend:
    name: Build and push backend image to GHCR
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    if: ${{ fromJSON(env.ON_STAGE) && (fromJSON(env.IS_PUSH) || (fromJSON(env.IS_MANUAL) && env.MODE == 'build-only')) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show workflow context
        shell: bash
        run: |
          echo "repo: ${{ github.repository }}"
          echo "actor: ${{ github.actor }}"
          echo "ref: ${{ github.ref }} (name: ${{ github.ref_name }})"
          echo "sha: ${{ github.sha }}"
          echo "event: ${{ github.event_name }} (mode=$MODE)"
          echo "intended image tags: ghcr.io/${{ github.repository_owner }}/delivergaz-backend:latest, :${{ github.sha }}"
          if [[ -n "${{ secrets.API_BASE_URL_PROD }}" ]]; then echo "API_BASE_URL_PROD: set"; else echo "API_BASE_URL_PROD: not set"; fi

      - name: Setup Flutter (stable)
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Flutter version
        run: flutter --version

      - name: Frontend - flutter pub get
        working-directory: frontend
        run: flutter pub get

      - name: Frontend - build web (release)
        working-directory: frontend
        run: flutter build web --release --dart-define=API_BASE_URL=${{ secrets.API_BASE_URL_PROD }}

      - name: Publish web build to backend/public
        shell: bash
        run: |
          rm -rf backend/public && mkdir -p backend/public
          cp -a frontend/build/web/. backend/public/
          echo "backend/public file count:" && find backend/public -type f | wc -l
          echo "backend/public top-level contents:" && ls -la backend/public | sed -n '1,50p'

      - name: Build and push Backend image
        uses: ./pipelines/docker-build-push
        with:
          context: ./backend
          file: ./backend/Dockerfile
          tags: |
            ghcr.io/${{ github.repository_owner }}/delivergaz-backend:latest
            ghcr.io/${{ github.repository_owner }}/delivergaz-backend:${{ github.sha }}
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    if: ${{ fromJSON(env.ON_STAGE) && (fromJSON(env.IS_PUSH) || (fromJSON(env.IS_MANUAL) && env.MODE == 'deploy-only')) }}
    env:
      REMOTE_TMP_DIR: /tmp/delivergaz-backend-env-${{ github.run_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve SSH port
        id: port
        shell: bash
        run: |
          if [[ -n "${{ secrets.EC2_PORT }}" ]]; then
            echo "port=${{ secrets.EC2_PORT }}" >> "$GITHUB_OUTPUT"
          else
            echo "port=22" >> "$GITHUB_OUTPUT"
          fi

      - name: Resolve image to deploy
        id: image
        shell: bash
        run: |
          if [[ "$IS_MANUAL" == "true" && "$MODE" == "deploy-only" ]]; then
            tag="${{ env.IMAGE_TAG_INPUT }}"
          else
            tag="latest"
          fi
          echo "image=ghcr.io/${{ github.repository_owner }}/delivergaz-backend:${tag}" >> "$GITHUB_OUTPUT"

      - name: Show deployment parameters
        shell: bash
        run: |
          echo "ref: ${{ github.ref }} (name: ${{ github.ref_name }})"
          echo "mode: ${MODE:-push}"
          echo "image: ${{ steps.image.outputs.image }}"
          echo "container port mapping: 3000:3000"
          echo "ssh port (effective): ${{ steps.port.outputs.port }}"
          if [[ -n "${{ secrets.EC2_HOST }}" ]]; then echo "EC2_HOST: set"; else echo "EC2_HOST: not set"; fi
          if [[ -n "${{ secrets.EC2_USER }}" ]]; then echo "EC2_USER: set"; else echo "EC2_USER: not set"; fi
          if [[ -n "${{ secrets.EC2_SSH_KEY }}" ]]; then echo "EC2_SSH_KEY: set"; else echo "EC2_SSH_KEY: not set"; fi
          if [[ -n "${{ secrets.EC2_PORT }}" ]]; then echo "EC2_PORT: set"; else echo "EC2_PORT: not set (default 22)"; fi
          if [[ -n "${{ secrets.GHCR_USERNAME }}" ]]; then echo "GHCR_USERNAME: set"; else echo "GHCR_USERNAME: not set"; fi
          if [[ -n "${{ secrets.GHCR_PAT }}" ]]; then echo "GHCR_PAT: set"; else echo "GHCR_PAT: not set"; fi
          if [[ -n "${{ secrets.MONGO_URI }}" ]]; then echo "MONGO_URI: set"; else echo "MONGO_URI: not set"; fi
          if [[ -n "${{ secrets.JWT_SECRET }}" ]]; then echo "JWT_SECRET: set"; else echo "JWT_SECRET: not set"; fi
          echo "remote env-file: /opt/delivergaz/backend/.env"

      - name: Prepare .env locally
        shell: bash
        run: |
          set -euo pipefail
          umask 077
          cat > backend/.env <<EOF
          NODE_ENV=production
          PORT=3000
          MONGO_URI=${{ secrets.MONGO_URI }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          EOF
          chmod 600 backend/.env

      - name: Prepare remote temp dir on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ steps.port.outputs.port }}
          script: |
            set -euo pipefail
            mkdir -p "${{ env.REMOTE_TMP_DIR }}"
            chmod 700 "${{ env.REMOTE_TMP_DIR }}"

      - name: Copy .env to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ steps.port.outputs.port }}
          source: "backend/.env"
          target: "${{ env.REMOTE_TMP_DIR }}/.env"

      - name: Move .env into place on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ steps.port.outputs.port }}
          script: |
            set -euo pipefail
            sudo mkdir -p /opt/delivergaz/backend
            sudo mv "${{ env.REMOTE_TMP_DIR }}/.env" /opt/delivergaz/backend/.env
            sudo chown root:root /opt/delivergaz/backend/.env
            sudo chmod 600 /opt/delivergaz/backend/.env
            rm -rf "${{ env.REMOTE_TMP_DIR }}"

      - name: Deploy to EC2
        uses: ./pipelines/ec2-ssh-deploy
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ steps.port.outputs.port }}
          image: ${{ steps.image.outputs.image }}
          ghcr-username: ${{ secrets.GHCR_USERNAME }}
          ghcr-pat: ${{ secrets.GHCR_PAT }}
          app-name: delivergaz-api
          host-port: '3000'
          container-port: '3000'
          env-file: /opt/delivergaz/backend/.env
          network: delivergaz-network