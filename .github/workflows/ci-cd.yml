name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  FLUTTER_VERSION: '3.16.0'

jobs:
  # Backend Jobs
  backend-lint-and-test:
    name: Backend Lint & Test
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'backend/') || contains(github.event.head_commit.added, 'backend/') || github.event_name == 'pull_request'
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Run ESLint
        run: |
          cd backend
          npm run lint

      - name: Run tests
        run: |
          cd backend
          npm test -- --coverage
        env:
          NODE_ENV: test
          MONGODB_TEST_URI: mongodb://localhost:27017/delivergaz_test
          JWT_SECRET: test-jwt-secret-for-testing-only

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Frontend Jobs
  frontend-lint-and-test:
    name: Frontend Lint & Test
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'frontend/') || contains(github.event.head_commit.added, 'frontend/') || github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          cd frontend
          flutter pub get

      - name: Verify Flutter installation
        run: flutter doctor -v

      - name: Run Flutter analyzer
        run: |
          cd frontend
          flutter analyze --fatal-infos

      - name: Run Flutter tests
        run: |
          cd frontend
          flutter test --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Build Jobs
  backend-build:
    name: Backend Build
    runs-on: ubuntu-latest
    needs: backend-lint-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Build TypeScript
        run: |
          cd backend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: backend/dist/

  frontend-web-build:
    name: Frontend Web Build
    runs-on: ubuntu-latest
    needs: frontend-lint-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          cd frontend
          flutter pub get

      - name: Build web app
        run: |
          cd frontend
          flutter build web --release --dart-define=API_BASE_URL=${{ secrets.API_BASE_URL_PROD }}

      - name: Upload web build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-web-build
          path: frontend/build/web/

  frontend-android-build:
    name: Frontend Android Build
    runs-on: ubuntu-latest
    needs: frontend-lint-and-test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          cd frontend
          flutter pub get

      - name: Build Android APK
        run: |
          cd frontend
          flutter build apk --release --dart-define=API_BASE_URL=${{ secrets.API_BASE_URL_PROD }}

      - name: Build Android App Bundle
        run: |
          cd frontend
          flutter build appbundle --release --dart-define=API_BASE_URL=${{ secrets.API_BASE_URL_PROD }}

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-android-build
          path: |
            frontend/build/app/outputs/flutter-apk/app-release.apk
            frontend/build/app/outputs/bundle/release/app-release.aab

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Deployment Jobs
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [backend-build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: backend/dist/

      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          usedocker: false
          appdir: backend

  deploy-frontend-web:
    name: Deploy Frontend Web
    runs-on: ubuntu-latest
    needs: [frontend-web-build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download web build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-web-build
          path: frontend/build/web/

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          channelId: live
          projectId: ${{ secrets.FIREBASE_PROJECT_ID }}

  # Notification Job
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend-web]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Notify Slack on Success
        if: needs.deploy-backend.result == 'success' && needs.deploy-frontend-web.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '🚀 DeliverGaz deployment successful!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify Slack on Failure
        if: needs.deploy-backend.result == 'failure' || needs.deploy-frontend-web.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ DeliverGaz deployment failed!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Performance Testing (Optional)
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [deploy-backend]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Artillery
        run: npm install -g artillery

      - name: Run performance tests
        run: |
          # Create a simple performance test
          echo "config:
            target: '${{ secrets.API_BASE_URL }}'
            phases:
              - duration: 60
                arrivalRate: 10
          scenarios:
            - name: 'API Health Check'
              requests:
                - get:
                    url: '/health'" > perf-test.yml
          
          artillery run perf-test.yml

  # Cleanup
  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend-web]
    if: always()

    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            backend-build
            frontend-web-build
            frontend-android-build