# Updated GitHub Actions workflow: Build image for backend and deploy to EC2 over SSH.
# Changes made:
# - Fixed branch mismatch so deploy runs when the workflow is triggered for the 'stage' branch.
# - Aligned container port to 3000 (matches typical Dockerfile / app default).
# - Added a check to ensure a remote .env file exists before starting the container.
# - Kept GHCR login/pull on the remote host using secrets (GHCR_PAT + GHCR_USERNAME).
# - Small robustness improvements (network create, stop/remove existing container).
#
# NOTE: Fill the required secrets in the repository:
# - EC2_HOST, EC2_USER, EC2_SSH_KEY, EC2_PORT (optional)
# - GHCR_PAT (token with read:packages), GHCR_USERNAME
# The runner uses the GITHUB_TOKEN to push to GHCR in the build step (packages: write permission is required).

name: Backend Docker Build & Deploy

on:
  push:
    branches: [ stage ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
  workflow_dispatch:

concurrency:
  group: backend-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    name: Build and push image to GHCR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build and push image
        uses: ./pipelines/docker-build-push
        with:
          context: ./backend
          file: ./backend/Dockerfile
          tags: |
            ghcr.io/${{ github.repository_owner }}/delivergaz-backend:latest
            ghcr.io/${{ github.repository_owner }}/delivergaz-backend:${{ github.sha }}
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push
    if: ${{ github.ref == 'refs/heads/stage' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: ./pipelines/ec2-ssh-deploy
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || '22' }}
          image: ghcr.io/${{ github.repository_owner }}/delivergaz-backend:latest
          ghcr-username: ${{ secrets.GHCR_USERNAME }}
          ghcr-pat: ${{ secrets.GHCR_PAT }}
          app-name: delivergaz-api
          host-port: '3000'
          container-port: '3000'
          env-file: /opt/delivergaz/backend/.env
          network: delivergaz-network